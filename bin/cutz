#!/usr/bin/env ruby

$VERBOSE=true
opts = Struct.new(:delimiter, :outputDelimiter, :outputFormat,
                  :thead, :theadAttributes,
                  :tbody, :tbodyAttributes,
                  :tfoot, :tfootAttributes,
                  :elements,
                  :fieldsUsed ).new

CSV=1
TEXT=2
HTML=3

### start-configuration-part ###
opts.delimiter = '\s+'
opts.elements = Array.new
opts.outputFormat = CSV
opts.fieldsUsed = true
### end-configuration-part ###

require 'optparse'

Field=1
Char=2

Program = $0[/[^\/]*$/]
Author = 'Michael Arlt'
Version = '0.3.2'

def range_to_first_last(range)
  if range =~ /^-?[1-9]+$/
    first=range.to_i
    last=first
  elsif range =~ /^-?[1-9]+[0-9]*\.\.(-?[1-9]+[0-9]*|)$/
    first,last=range.split(/\.\./).map(&:to_i)
    last=-1 if last.nil?
  else
    exit_help_error("LIST #{range} is invalid")
  end
  return first,last
end

def pos_to_positive_value(pos,max)
  pos < 0 ? max+pos : pos-1
end

ARGV.options do |o|
  o.separator ""
  o.banner = "Synopsis: #{Program} [options] [file ...]"
  o.separator "    'cutz' cuts similar to cut"
  o.separator "      - LIST format is selection[,selection,...] where selection is:"
  o.separator "          n    # exact n"
  o.separator "          -n   # -1 is the last, -2 is next to last, ..."
  o.separator "          n..m # n upto m - both can be negative"
  o.separator "          n..  # n to end - n can be negative"
  o.separator ""
  o.separator "Options:"
  o.separator ""

  o.on( '-f', '--fields LIST', 'Select fields' ) do |fieldList|
    fieldList.split(',').each { |element|
      opts.elements << [Field,*range_to_first_last(element)]
      opts.fieldsUsed = true
    }
  end

  o.on( '-c', '--characters LIST', 'Select characters' ) do |charList|
    charList.split(',').each { |element|
      opts.elements << [Char,*range_to_first_last(element)]
    }
  end

  o.on( '-d', '--delimiter DELIM', 'Use DELIM instead of whitespace (regex)' ) do |d|
    opts.delimiter = d
  end

  o.on( '-o', '--output-delimiter STRING', 'Use DELIM instead of input delimiter' ) do |d|
    opts.outputDelimiter = d
  end

  o.on( '-t', '--text', 'Output simple text table (data in memory!)' ) do
    opts.outputFormat = TEXT
  end

  o.on( '-h', '--html', 'Output simple html table records <tr>...' ) do
    opts.outputFormat = HTML
  end

  o.on( '--thead [html-attributes]', 'Add <thead>(1st line),<tbody> tags to html' ) do |p|
    opts.thead = true
    opts.theadAttributes = p
  end

  o.on( '--tbody [html-attributes]', 'Add <tbody> tags to html output' ) do |p|
    opts.tbody = true
    opts.tbodyAttributes = p
  end

  o.on( '--tfoot [html-attributes]', 'Add <tfoot>(last line),<tbody> tags to html' ) do |p|
    opts.tfoot = true
    opts.tfootAttributes = p
  end

  o.on( '-a', '--tall', 'Add all html tags or color to text layout' ) do
    opts.thead = true
    opts.tbody = true
    opts.tfoot = true
  end

  o.on( '-?', '--help', 'Help' ) do
    puts o
    exit
  end

  o.on_tail('-v', '--version', 'Show program version and license information') do
    puts o.ver
    puts "Author #{Author}"
    puts "Use ruby >= 1.9.1 for utf8-aware char cutting"
    puts "This is free software.  You may redistribute copies of it under the terms of"
    puts "the GNU General Public License <http://www.gnu.org/licenses/gpl.html>."
    puts "There is NO WARRANTY, to the extent permitted by law."
    puts "License: GPLv3 - see http://www.gnu.org/licenses/gpl.html"
    exit
  end
end

def exit_error(message)
  STDERR.puts "E: #{message}"
  exit 1
end
def exit_help_error(message)
  puts ARGV.options.to_s
  exit_error(message)
end
	
begin
  ARGV.parse!
rescue => optparse
  exit_help_error(optparse.message)
end

if opts.outputDelimiter.nil?
  opts.outputDelimiter = opts.delimiter == '\s+' ? ' ' : opts.delimiter
end


class Grid

  def initialize(mode,outputDelimiter,
                 thead,theadAttributes,
                 tbody,tbodyAttributes,
                 tfoot,tfootAttributes)
    @lines=Array.new
    @cols=Array.new
    @maxWidth=Array.new
    @mode=mode
    @outputDelimiter=outputDelimiter
    @thead=@theadend=@tbody=@tbodyend=@tfoot=@tfootend=nil
    @firstLine=true
    if @mode == TEXT
      if thead
        @thead="\033[1m"
        @theadend="\033[0m"
      end
      if tfoot
        @tfoot="\033[2m"
        @tfootend="\033[0m"
      end
    elsif @mode == HTML
      if thead
        @thead="<thead>"
        @theadend="</thead>"
        @thead.insert(-2,' '+theadAttributes) if theadAttributes
      end
      if tbody || thead || tfoot
        @tbody="<tbody>"
        @tbodyend="</tbody>"
        @tbody.insert(-2,' '+tbodyAttributes) if tbodyAttributes
      end
      if tfoot
        @tfoot="<tfoot>"
        @tfootend="</tfoot>"
        @tfoot.insert(-2,' '+tfootAttributes) if tfootAttributes
      end
    end
  end

  def add_field(data)
    @cols<<data
    if @mode == TEXT && data
      if @maxWidth[@cols.length-1].nil? || data.length > @maxWidth[@cols.length-1]
        @maxWidth[@cols.length-1]=data.length
      end
    end
  end

  def lf
    if @mode == TEXT
      @lines<<@cols.clone
    elsif @mode == CSV
      puts @cols.join(@outputDelimiter)
    else
      if @thead
        puts @thead if @thead
        puts '<tr><th>' + @cols.join('</th><th>') + '</th></tr>'
        puts @theadend if @thead
        @thead=@theadend=nil
      else
        if @tbody
          puts @tbody if @tbody
          @tbody=nil
        end
        puts '<tr><td>' + @cols.join('</td><td>') + '</td></tr>'
      end
    end
    @cols.clear
  end

  def add_row
    self.lf unless @firstLine
    @firstLine=false
  end

  def finish
    if @mode == TEXT
      self.lf
      i=0
      while i < @lines.length
        line=@lines[i]
        print @tfoot if @tfoot && i == @lines.length - 1 && @lines.length > 2
        print @thead if i == 0 && @thead
        j=0
        while j < line.length
          printf "%-#{@maxWidth[j]}s",line[j]
          j+=1
          printf " " if j < line.length
        end
        print @theadend if i == 0 && @theadend
        print @tfootend if @tfoot && i == @lines.length - 1
        i+=1
        puts
      end
    elsif @mode == CSV
      self.lf
    elsif @mode == HTML
      if @tbody
        self.lf
        puts @tbodyend if !@tbody
      elsif @tfoot
        puts @tbodyend
        puts @tfoot
        self.lf
        puts @tfootend
      else
        self.lf
        puts @tbodyend if @tbodyend && !@tbody
      end
    end
  end

end # class Grid


grid = Grid.new(opts.outputFormat,opts.outputDelimiter,
                opts.thead,opts.theadAttributes,
                opts.tbody,opts.tbodyAttributes,
                opts.tfoot,opts.tfootAttributes)

while line = gets
  grid.add_row
  line.chomp!
  cols=line.split(/#{opts.delimiter}/) if opts.fieldsUsed
  opts.elements.each { |type,first,last|
    if type == Field
      first=pos_to_positive_value(first,cols.length)
      last=pos_to_positive_value(last,cols.length)
      step = last > first ? 1 : -1
      element = first
      loop do
        grid.add_field(cols[element]) if last >= 0 && cols[element]
        break if element == last
        element+=step
      end
    elsif type == Char
      first=pos_to_positive_value(first,line.length)
      last=pos_to_positive_value(last,line.length)
      if last < 0
        grid.add_field('')
      else
      if first > last
        grid.add_field(line[last,first-last+1].reverse)
      else
        grid.add_field(line[first,last-first+1])
      end
      end
    end
  }
end

grid.finish
